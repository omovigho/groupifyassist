"""Initial tables

Revision ID: bdb7b4bcd6f4
Revises: 77d15e69eb17
Create Date: 2025-07-09 14:31:31.910794

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'bdb7b4bcd6f4'
down_revision: Union[str, Sequence[str], None] = '77d15e69eb17'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
   # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('country', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('verified', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('verification_code', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('verification_expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('group_sessions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('group_sessions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('code', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('host_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('max_group_size', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('reveal_immediately', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['host_id'], ['users.id'], name='group_sessions_host_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='group_sessions_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_group_sessions_code'), 'group_sessions', ['code'], unique=True)
    op.create_table('group_members',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('group_session_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('group_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('attributes', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('member_identifier', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('joined_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['group_session_id'], ['group_sessions.id'], name=op.f('group_members_group_session_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('group_members_pkey'))
    )
    op.create_table('selection_sessions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('selection_sessions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('code', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('host_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['host_id'], ['users.id'], name='selection_sessions_host_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='selection_sessions_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_selection_sessions_code'), 'selection_sessions', ['code'], unique=True)
    op.create_table('selection_members',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('selection_members_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('selection_session_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('attributes', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('member_identifier', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('selected', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('joined_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['selection_session_id'], ['selection_sessions.id'], name='selection_members_selection_session_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='selection_members_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('access_codes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('code', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('host_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['host_id'], ['users.id'], name=op.f('access_codes_host_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('access_codes_pkey'))
    )
    op.create_table('preferential_grouping_rules',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('group_session_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('field_key', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('max_per_group', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['group_session_id'], ['group_sessions.id'], name=op.f('preferential_grouping_rules_group_session_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('preferential_grouping_rules_pkey'))
    )
    op.create_index(op.f('ix_access_codes_code'), 'access_codes', ['code'], unique=True)
    op.create_table('field_definitions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('session_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('field_key', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('label', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('data_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('options', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('required', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['session_id'], ['group_sessions.id'], name=op.f('field_definitions_session_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('field_definitions_pkey'))
    )
    op.create_table('selection_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('selection_session_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('member_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('selected_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('selection_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['member_id'], ['selection_members.id'], name=op.f('selection_logs_member_id_fkey')),
    sa.ForeignKeyConstraint(['selection_session_id'], ['selection_sessions.id'], name=op.f('selection_logs_selection_session_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('selection_logs_pkey'))
    )

def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
